q1:
class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
        if (m * n != original.size()) return {};
        
        vector<vector<int>> res;
        for (int i = 0; i < m*n; i+=n)
            res.push_back(vector<int>(original.begin()+i, original.begin()+i+n));
            
        return res;
    }
};
q2:
class Solution {
public:
    int arrangeCoins(int n) {
        int i=1;
        while(n>=i){
            n=n-i;
            i++;
        }
        return  i-1;
    }
};
q3:
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for(int i=0;i<nums.size();i++){
             nums[i]=nums[i]*nums[i];
        }
        sort(nums.begin(), nums.end());  
        return nums;
    }
};
q4:
class Solution {
public:
    vector<int> getElementsOnlyInFirstList(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> onlyInNums1;
        
        // Store nums2 elements in an unordered set. 
        unordered_set<int> existsInNums2;
        for (int num : nums2) {
            existsInNums2.insert(num);
        }
        
        // Iterate over each element in the list nums1.
        for (int num : nums1) {
            if (existsInNums2.find(num) == existsInNums2.end()) {
                onlyInNums1.insert(num);
            }
        }
        
        // Convert to vector.
        return vector<int> (onlyInNums1.begin(), onlyInNums1.end());
    }
    
    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        return {getElementsOnlyInFirstList(nums1, nums2), getElementsOnlyInFirstList(nums2, nums1)};
    }
};
q5:
class Solution {
public:
    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {
        int ans=0,n1=arr1.size(),n2=arr2.size();
        for(int i=0;i<n1;i++){
            bool flag=0;
            for(int j=0;j<n2 && !flag ; j++){
                if(abs(arr1[i]-arr2[j])<=d) flag=1;
            }
            if(flag==0) ans++;
        }
        return ans;
    }
};
q6:
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        if(nums.empty())return {};
        vector<int>ans;
        for(int i=0;i<nums.size();i++){
            if(nums[abs(nums[i])-1]<0)
                ans.push_back(abs(nums[i]));
            nums[abs(nums[i])-1]=-nums[abs(nums[i])-1];
        }
        return ans;
    }
};
q7:
class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        for(int i=0;i<n-1;i++){
            if(nums[i]>nums[i+1]) return nums[i+1];
        }
        return nums[0];
    }
};
q8:
class Solution {
public:
    vector<int> findOriginalArray(vector<int>& changed) {
        vector<int> v;
        if(changed.size()%2!=0){
            return v;
        }
        sort(changed.begin(),changed.end());
        for(int i=0;i<changed.size();i++){
            auto it= find(changed[i+1],changed.end(),2 *changed[i]);
            if(it!=changed.end()){
                v.push_back(changed[i]);
            }
        }
        return v;
    }
};
